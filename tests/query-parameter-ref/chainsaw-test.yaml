apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: query-parameter-ref
spec:
  steps:
    - try:
      # First apply mock server
      - apply:
          file: manifests/a00-mock-server.yaml
      # Wait for mock server pod to be ready
      - assert:
          resource:
            apiVersion: v1
            kind: Pod
            metadata:
              name: mock-openai
            status:
              phase: Running
              (contains(conditions[?type == 'Ready'].status, 'True')): true
      # Now apply RBAC, ConfigMap, Secret
      - apply:
          file: manifests/a0[1-3]-*.yaml
      # Now create the Model after mock server is ready
      - script:
          content: |
            kubectl apply -f - <<EOF
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Model
            metadata:
              name: mock-gpt-4.1
              namespace: $NAMESPACE
            spec:
              type: openai
              model:
                value: gpt-4.1
              pollInterval: 3s
              config:
                openai:
                  baseUrl:
                    value: http://mock-openai.$NAMESPACE.svc.cluster.local/v1
                  apiKey:
                    value: mock-api-key
            EOF
      # Finally apply agents and queries
      - apply:
          file: manifests/a0[4-7]-*.yaml
      - assert:
          resource:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: query-config
      - assert:
          resource:
            apiVersion: v1
            kind: Secret
            metadata:
              name: query-secrets
      - assert:
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Model
            metadata:
              name: mock-gpt-4.1
            status:
              conditions:
              - type: ModelAvailable
                status: "True"
      - assert:
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Agent
            metadata:
              name: test-agent
      - assert:
          timeout: 5s
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Query
            metadata:
              name: test-query-with-params
            status:
              phase: done
      # Response is immutable after phase: done, no need to retry
      - assert:
          timeout: 1s
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Query
            metadata:
              name: test-query-with-params
            status:
              (length(responses)): 1
              (contains(responses[*].target.name, 'test-agent')): true
              # Verify system message echoed back with resolved parameter
              (contains(responses[0].raw, '"role":"system"')): true
              (contains(responses[0].content, 'QueryAgent123')): true
      # Test nested valueFrom resolution - Agent referencing Query params that use ConfigMap/Secret
      - assert:
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Agent
            metadata:
              name: test-agent-nested
      - assert:
          timeout: 5s
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Query
            metadata:
              name: test-query-nested-params
            status:
              phase: done
      # Response is immutable after phase: done, no need to retry
      - assert:
          timeout: 1s
          resource:
            apiVersion: ark.mckinsey.com/v1alpha1
            kind: Query
            metadata:
              name: test-query-nested-params
            status:
              (length(responses)): 1
              (contains(responses[*].target.name, 'test-agent-nested')): true
              # Verify the agent received the nested-resolved parameters
              (contains(join('', responses[*].content), 'NestedConfigAgent')): true
              (contains(join('', responses[*].content), 'SecretAnalyst')): true
      catch:
      - events: {}
      - describe:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Query
          name: test-query-with-params